var a={name:null};var n=class l extends Function{static decorate(e,t){e={key:e.name,value:e};t(e),l.rename(e.value,e.key);const r=e.value.toString().replace("function","function "+e.key);return e.value.toString=()=>r,e.value}static decorateMethod(e,t,r){var a=e.prototype[t],a={key:a.name,value:a};r(e,t,a),l.renameMethod(e,t,a.key);const n=a.value.toString().replace(t,a.key);return a.value.toString=()=>n,a.value}static rename(e,t){return t&&Object.defineProperty(e,"name",{value:t,writable:!1}),e}static renameMethod(e,t,r){var a;return r?(a=l.rename(e.prototype[t],r),Object.defineProperty(e.prototype,r,{value:a,writable:!0}),delete e.prototype[t],a):e.prototype[t]}constructor(e,t=null){var r;return super(),[t,r=null]=[e,t],null==r&&(r={}),null==(r=Object.assign({},a,r)).name&&(r.name=a.name),(r=null!=(r=r.name)?r:null)&&n.rename(t,r),Object.setPrototypeOf(e,new.target.prototype)}};export{n as Callable};